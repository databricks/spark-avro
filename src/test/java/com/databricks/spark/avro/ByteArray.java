/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.databricks.spark.avro;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ByteArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ByteArray\",\"namespace\":\"com.databricks.spark.avro\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.nio.ByteBuffer> value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public ByteArray() {}

  /**
   * All-args constructor.
   */
  public ByteArray(java.util.List<java.nio.ByteBuffer> value) {
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.util.List<java.nio.ByteBuffer> getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.util.List<java.nio.ByteBuffer> value) {
    this.value = value;
  }

  /** Creates a new ByteArray RecordBuilder */
  public static ByteArray.Builder newBuilder() {
    return new ByteArray.Builder();
  }
  
  /** Creates a new ByteArray RecordBuilder by copying an existing Builder */
  public static ByteArray.Builder newBuilder(ByteArray.Builder other) {
    return new ByteArray.Builder(other);
  }
  
  /** Creates a new ByteArray RecordBuilder by copying an existing ByteArray instance */
  public static ByteArray.Builder newBuilder(ByteArray other) {
    return new ByteArray.Builder(other);
  }
  
  /**
   * RecordBuilder for ByteArray instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ByteArray>
    implements org.apache.avro.data.RecordBuilder<ByteArray> {

    private java.util.List<java.nio.ByteBuffer> value;

    /** Creates a new Builder */
    private Builder() {
      super(ByteArray.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ByteArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ByteArray instance */
    private Builder(ByteArray other) {
            super(ByteArray.SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'value' field */
    public java.util.List<java.nio.ByteBuffer> getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public ByteArray.Builder setValue(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'value' field */
    public ByteArray.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ByteArray build() {
      try {
        ByteArray record = new ByteArray();
        record.value = fieldSetFlags()[0] ? this.value : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
