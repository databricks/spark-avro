/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.databricks.spark.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SimpleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimpleRecord\",\"namespace\":\"com.databricks.spark.avro\",\"fields\":[{\"name\":\"nested1\",\"type\":\"int\",\"default\":0},{\"name\":\"nested2\",\"type\":\"string\",\"default\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int nested1;
  @Deprecated public java.lang.CharSequence nested2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SimpleRecord() {}

  /**
   * All-args constructor.
   */
  public SimpleRecord(java.lang.Integer nested1, java.lang.CharSequence nested2) {
    this.nested1 = nested1;
    this.nested2 = nested2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nested1;
    case 1: return nested2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nested1 = (java.lang.Integer)value$; break;
    case 1: nested2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nested1' field.
   */
  public java.lang.Integer getNested1() {
    return nested1;
  }

  /**
   * Sets the value of the 'nested1' field.
   * @param value the value to set.
   */
  public void setNested1(java.lang.Integer value) {
    this.nested1 = value;
  }

  /**
   * Gets the value of the 'nested2' field.
   */
  public java.lang.CharSequence getNested2() {
    return nested2;
  }

  /**
   * Sets the value of the 'nested2' field.
   * @param value the value to set.
   */
  public void setNested2(java.lang.CharSequence value) {
    this.nested2 = value;
  }

  /** Creates a new SimpleRecord RecordBuilder */
  public static com.databricks.spark.avro.SimpleRecord.Builder newBuilder() {
    return new com.databricks.spark.avro.SimpleRecord.Builder();
  }
  
  /** Creates a new SimpleRecord RecordBuilder by copying an existing Builder */
  public static com.databricks.spark.avro.SimpleRecord.Builder newBuilder(com.databricks.spark.avro.SimpleRecord.Builder other) {
    return new com.databricks.spark.avro.SimpleRecord.Builder(other);
  }
  
  /** Creates a new SimpleRecord RecordBuilder by copying an existing SimpleRecord instance */
  public static com.databricks.spark.avro.SimpleRecord.Builder newBuilder(com.databricks.spark.avro.SimpleRecord other) {
    return new com.databricks.spark.avro.SimpleRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for SimpleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimpleRecord>
    implements org.apache.avro.data.RecordBuilder<SimpleRecord> {

    private int nested1;
    private java.lang.CharSequence nested2;

    /** Creates a new Builder */
    private Builder() {
      super(com.databricks.spark.avro.SimpleRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.databricks.spark.avro.SimpleRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nested1)) {
        this.nested1 = data().deepCopy(fields()[0].schema(), other.nested1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nested2)) {
        this.nested2 = data().deepCopy(fields()[1].schema(), other.nested2);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SimpleRecord instance */
    private Builder(com.databricks.spark.avro.SimpleRecord other) {
            super(com.databricks.spark.avro.SimpleRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.nested1)) {
        this.nested1 = data().deepCopy(fields()[0].schema(), other.nested1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nested2)) {
        this.nested2 = data().deepCopy(fields()[1].schema(), other.nested2);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'nested1' field */
    public java.lang.Integer getNested1() {
      return nested1;
    }
    
    /** Sets the value of the 'nested1' field */
    public com.databricks.spark.avro.SimpleRecord.Builder setNested1(int value) {
      validate(fields()[0], value);
      this.nested1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nested1' field has been set */
    public boolean hasNested1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nested1' field */
    public com.databricks.spark.avro.SimpleRecord.Builder clearNested1() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nested2' field */
    public java.lang.CharSequence getNested2() {
      return nested2;
    }
    
    /** Sets the value of the 'nested2' field */
    public com.databricks.spark.avro.SimpleRecord.Builder setNested2(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nested2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nested2' field has been set */
    public boolean hasNested2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nested2' field */
    public com.databricks.spark.avro.SimpleRecord.Builder clearNested2() {
      nested2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SimpleRecord build() {
      try {
        SimpleRecord record = new SimpleRecord();
        record.nested1 = fieldSetFlags()[0] ? this.nested1 : (java.lang.Integer) defaultValue(fields()[0]);
        record.nested2 = fieldSetFlags()[1] ? this.nested2 : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
